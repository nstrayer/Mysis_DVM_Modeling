s7062_dom_log = makeFrequencies(data.frame(control,case))
#rec
case    = c(s7062_rec_a ,  s7062_rec_c)
control = c(s7062_rec_b , s7062_rec_d)
s7062_rec_log = makeFrequencies(data.frame(control,case))
s7062_dom_log
s7062_rec_log
#7602
#dom
case    = c(s7062_dom_a ,  s7062_dom_c)
control = c(s7062_dom_b , s7062_dom_d)
s7062_dom_log = makeFrequencies(data.frame(control,case))
#rec
case    = c(s7062_rec_a ,  s7062_rec_c)
control = c(s7062_rec_b , s7062_rec_d)
s7062_rec_log = makeFrequencies(data.frame(control,case))
#7604
#dom
case    = c(s7064_dom_a ,  s7064_dom_c)
control = c(s7064_dom_b , s7064_dom_d)
s7064_dom_log = makeFrequencies(data.frame(control,case))
#rec
case    = c(s7064_rec_a ,  s7064_rec_c)
control = c(s7064_rec_b , s7064_rec_d)
s7064_rec_log = makeFrequencies(data.frame(control,case))
s7064_dom_log
s7064_rec_log
logisticOR = function(df){
return ((df[1,1]/df[1,2])/(df[2,1]/df[2,2]))
}
makeFrequencies = function(df){
for (i in 1:length(df)){
df[i,] = df[i,] / sum(df[i,])
}
return(df)
}
logisticOR = function(df){
df = makeFrequencies(df) #convert the table into frequencies first
return ((df[1,1]/df[1,2])/(df[2,1]/df[2,2]))
}
s7062_logOR = logisticOR(data.frame(control,case))
s7062_logOR
logisticOR = function(df){
df = makeFrequencies(df) #convert the table into frequencies first
return ((df[2,1]/df[2,2])/(df[1,1]/df[1,2]))
}
s7062_logOR = logisticOR(data.frame(control,case))
s7062_logOR
case    = c(s7062_rec_a ,  s7062_rec_c)
control = c(s7062_rec_b , s7062_rec_d)
s7062_rec_LogOR = logisticOR(data.frame(control,case))
s7062_rec_LogOR
#7604
#dom
case    = c(s7064_dom_a ,  s7064_dom_c)
control = c(s7064_dom_b , s7064_dom_d)
s7064_dom_LogOR = logisticOR(data.frame(control,case))
#rec
case    = c(s7064_rec_a ,  s7064_rec_c)
control = c(s7064_rec_b , s7064_rec_d)
s7064_rec_LogOR = logisticOR(data.frame(control,case))
s7064_dom_LogOR
s7064_rec_LogOR
help(contrasts)
summary(7604)
summary(s7604)
summary(s7602)
snp <- s7602 #make a copy with a shorter name for convenience
attributes(snp)
contrasts(snp)
contrasts(snp) <- contr.treatment              #default values (1,2,3) for contrast names
attributes(snp)
model2 <- glm(cc ~ snp, family=binomial)
model2
newCC = cc
newCC[newCC = 1] = FALSE
newCC[newCC = 2] = TRUE
newCC
newCC = cc
newCC[newCC == 1] = FALSE
newCC[newCC == 2] = TRUE
newCC
cc
model2 <- glm(newCC ~ snp, family=binomial)
model2
View(amd)
amd[1,]
dimnames(amd[1,])
dimnames(amd)
rownames(amd)
rownames(amd[1,])
4199 * 7
x <- table(s7062,cc == 2)
x
x
xx <- matrix(NA,2,2)
xx[1,1] <- x[1,1]
xx[1,2] <- x[1,2]
xx[2,1] <- x[2,1] + x[3,1]
xx[2,2] <- x[2,2] + x[3,2]
x
xx <- matrix(NA,2,2)
xx[1,1] <- x[1,1]
xx[1,2] <- x[1,2]
xx[2,1] <- x[2,1] + x[3,1]
xx[2,2] <- x[2,2] + x[3,2]
rownames(xx) <- c("CC","OTH")
xx
(xx[1,1]*xx[2,2])/(xx[1,2]*xx[2,1])
1/(xx[1,1]*xx[2,2])/(xx[1,2]*xx[2,1])
(xx[1,2]*xx[2,1])/(xx[1,1]*xx[2,2])
Add <- c(2, 1, 0) #Number of A alleles FOR THIS SNP
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Additive model on the log-odds scale
contrasts(s7062,1) <- cbind(Add)
contrasts(s7062)
model3 <- glm(pre.BMI>25 ~ s7062, family=binomial)
#model3
exp(model3$coeff)
contrasts(s7062,1) <- cbind(Add)
contrasts(s7062)
model3 <- glm(cc==2 ~ s7062, family=binomial)
#model3
exp(model3$coeff)
snp = s7062
x <- table(snp,cc == 2)
x
xx <- matrix(NA,2,2)
xx[1,1] <- x[1,1]
xx[1,2] <- x[1,2]
xx[2,1] <- x[2,1] + x[3,1]
xx[2,2] <- x[2,2] + x[3,2]
rownames(xx) <- c("CC","OTH")
xx
(xx[1,2]*xx[2,1])/(xx[1,1]*xx[2,2]) #upside down because of r being weird about letters
#Dummy coding for Additive (log-odds scale), Dominant, and Recessive models
#AA GA GG
Add <- c(2, 1, 0) #Number of A alleles FOR THIS SNP
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Additive model on the log-odds scale
contrasts(snp,1) <- cbind(Add)
contrasts(snp)
model3 <- glm(cc==2 ~ snp, family=binomial)
#model3
exp(model3$coeff)
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
model4 <- glm(cc==2 ~ snp, family=binomial)
#model4
exp(model4$coeff)
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
model5 <- glm(cc==2 ~ snp, family=binomial)
#model5
exp(model5$coeff)
m2.sum <- summary(model2)
ci.l <- exp( m2.sum$coeff[,1] - 1.96*(m2.sum$coeff[,2]) )
ci.u <- exp( m2.sum$coeff[,1] + 1.96*(m2.sum$coeff[,2]) )
rbind(ci.l, ci.u)
m4.sum <- summary(model4)
ci.l <- exp( m2.sum$coeff[,1] - 1.96*(m2.sum$coeff[,2]) )
ci.u <- exp( m2.sum$coeff[,1] + 1.96*(m2.sum$coeff[,2]) )
rbind(ci.l, ci.u)
m4.sum <- summary(model4)
ci.l <- exp( m4.sum$coeff[,1] - 1.96*(m4.sum$coeff[,2]) )
ci.u <- exp( m4.sum$coeff[,1] + 1.96*(m4.sum$coeff[,2]) )
rbind(ci.l, ci.u)
m5.sum <- summary(model5)
ci.l <- exp( m5.sum$coeff[,1] - 1.96*(m5.sum$coeff[,2]) )
ci.u <- exp( m5.sum$coeff[,1] + 1.96*(m5.sum$coeff[,2]) )
rbind(ci.l, ci.u)
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
exp(Dom_model$coeff)
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
exp(Rec_model$coeff)
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
rbind(ci.l, ci.u)
snp = s7062
#snp = s7694
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
Rec_CI
Rec_CI[2,1]
Rec_CI[1,2]
DomResults = paste("Dominant: OR:", toString(Dom_OR), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
DomResults
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
DomResults
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
#snp = s7062
snp = s7694
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp = s7694[s7694 != "00"]
snp
CC_Log = cc==2
CC_Log
snp = s7062
CC_Log = cc==2
#snp = s7694[s7694 != "00"]
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp = s7694[s7694 != "00"]
CC_Log = cc[s7694 != "00"]==2
snp = s7694[s7694 != "00"]
CC_Log = cc[s7694 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp
summary(snp)
s7694
snp = s7094[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
contrasts(snp,1)
contrasts(snp,1)[-1,]
contrasts(snp)
contrasts(snp,1)[-1,] <- cbind(Dom)
contrasts(snp)[-1,]
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
print(DomResults)
1/.17
1/0.170385395537526
DomResults = paste("Dominant: OR:", toString(1/Dom_OR[2]), " Confidence Interval: (", toString(1/Dom_CI[1,2]), toString(1/Dom_CI[2,2]), ")")
DomResults = paste("Dominant: OR:", toString((1/Dom_OR[2])), " Confidence Interval: (", toString((1/Dom_CI[1,2])), toString((1/Dom_CI[2,2])), ")")
print(DomResults)
snp = factor(s7064[s7064 != "00"])
snp
summary(snp1)
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
# snp = s7062
# CC_Log = cc==2
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
setwd("/Users/Nick/mysisModeling")
# Thus begins the mysis model.
# Functions that drive the model are written in the form Foo_Foo
# Variables that go into the model are writtenin camelCase. E.g. fooFoo.
#Let's bring in the thermocline depth data
#---------------------------------------------------------------------------------------------
#Bringing in outside data:
#---------------------------------------------------------------------------------------------
depthData = read.csv("thermoclineDepths.csv")$dist
#---------------------------------------------------------------------------------------------
#Different function declerations:
#---------------------------------------------------------------------------------------------
Light_Response = function(lightLevels){
}
Temp_Response  = function(thermoclineDepth){
pressure = (-1/40)*thermoclineDepth + 1
return(pressure)
}
#Code to test out what the response to thermocline depth function looks like
# response = c()
# for (depth in depthData){
#   response = c(response,Temp_Response(depth) )
# }
# png("thermoclineResponse.png")
# plot(0:(365*24), response)
# dev.off()
#---------------------------------------------------------------------------------------------
#Class and method declarations:
#---------------------------------------------------------------------------------------------
# testing object based r coding:
setClass("mysis",
representation(
cals = "numeric",
migrating = "logical"),
prototype(
cals = 0,
migrating = FALSE),
)
#Set the show method, basically how we want the program to display the info about the mysis on calling.
setMethod("show", "mysis",
function(object){
print(object@cals)
print(object@migrating)
})
#Making an a function to step the mysids through time, first we initialize a generic method as there is no
#pre-defined nextTime method for any other R classes. Then we set the method.
setGeneric( "nextTime", function(object, ...){standardGeneric("nextTime")})
setMethod("nextTime","mysis",
function(object, tempPressure){
object@cals = object@cals - 3
if(object@migrating == TRUE){ #if they migrated last itteration...
object@cals =  object@cals + 10 #they gain calories
object@migrating = FALSE #They go back down
} else if(object@cals < 10 && tempPressure < .5){     #if they meet migration thresholds...
object@migrating = TRUE #initiate migration
} else if (object@cals < 5){ #If they are about to starve
object@migrating = TRUE #initiate migration
}
object}
)
#---------------------------------------------------------------------------------------------
#Model testing:
#---------------------------------------------------------------------------------------------
#mysids = c(new("mysis", cals = 30), new("mysis", cals = 25) )
#Function to initialize 1000 mysids with random (uniform between 5 and 30) calories.
mysids = NULL
for (i in 1:10){
initialCals = sample(5:30,1)
mysids = c(mysids, new("mysis", cals = initialCals) )
}
allMigrations = NULL
migrations = NULL
counter = 1
while (counter < (365*24)){
migrations = NULL
for (mysis in mysids){
mysis = nextTime(mysis, Temp_Response(counter))
migrations = c(migrations, mysis@migrating)
print(mysis)
}
allMigrations = cbind(allMigrations, migrations)
counter = counter + 1
}
View(allMigrations)
View(allMigrations)
