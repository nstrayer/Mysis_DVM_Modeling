ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp
summary(snp)
s7694
snp = s7094[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
contrasts(snp,1)
contrasts(snp,1)[-1,]
contrasts(snp)
contrasts(snp,1)[-1,] <- cbind(Dom)
contrasts(snp)[-1,]
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
print(DomResults)
1/.17
1/0.170385395537526
DomResults = paste("Dominant: OR:", toString(1/Dom_OR[2]), " Confidence Interval: (", toString(1/Dom_CI[1,2]), toString(1/Dom_CI[2,2]), ")")
DomResults = paste("Dominant: OR:", toString((1/Dom_OR[2])), " Confidence Interval: (", toString((1/Dom_CI[1,2])), toString((1/Dom_CI[2,2])), ")")
print(DomResults)
snp = factor(s7064[s7064 != "00"])
snp
summary(snp1)
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
# snp = s7062
# CC_Log = cc==2
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
setwd("/Users/Nick/mysisModeling")
# Thus begins the mysis model.
# Functions that drive the model are written in the form Foo_Foo
# Variables that go into the model are writtenin camelCase. E.g. fooFoo.
#Let's bring in the thermocline depth data
#---------------------------------------------------------------------------------------------
#Bringing in outside data:
#---------------------------------------------------------------------------------------------
depthData = read.csv("thermoclineDepths.csv")$dist
#---------------------------------------------------------------------------------------------
#Different function declerations:
#---------------------------------------------------------------------------------------------
Light_Response = function(lightLevels){
}
Temp_Response  = function(thermoclineDepth){
pressure = (-1/40)*thermoclineDepth + 1
return(pressure)
}
#Code to test out what the response to thermocline depth function looks like
# response = c()
# for (depth in depthData){
#   response = c(response,Temp_Response(depth) )
# }
# png("thermoclineResponse.png")
# plot(0:(365*24), response)
# dev.off()
#---------------------------------------------------------------------------------------------
#Class and method declarations:
#---------------------------------------------------------------------------------------------
# testing object based r coding:
setClass("mysis",
representation(
cals = "numeric",
migrating = "logical"),
prototype(
cals = 0,
migrating = FALSE),
)
#Set the show method, basically how we want the program to display the info about the mysis on calling.
setMethod("show", "mysis",
function(object){
print(object@cals)
print(object@migrating)
})
#Making an a function to step the mysids through time, first we initialize a generic method as there is no
#pre-defined nextTime method for any other R classes. Then we set the method.
setGeneric( "nextTime", function(object, ...){standardGeneric("nextTime")})
setMethod("nextTime","mysis",
function(object, tempPressure){
object@cals = object@cals - 3
if(object@migrating == TRUE){ #if they migrated last itteration...
object@cals =  object@cals + 10 #they gain calories
object@migrating = FALSE #They go back down
} else if(object@cals < 10 && tempPressure < .5){     #if they meet migration thresholds...
object@migrating = TRUE #initiate migration
} else if (object@cals < 5){ #If they are about to starve
object@migrating = TRUE #initiate migration
}
object}
)
#---------------------------------------------------------------------------------------------
#Model testing:
#---------------------------------------------------------------------------------------------
#mysids = c(new("mysis", cals = 30), new("mysis", cals = 25) )
#Function to initialize 1000 mysids with random (uniform between 5 and 30) calories.
mysids = NULL
for (i in 1:10){
initialCals = sample(5:30,1)
mysids = c(mysids, new("mysis", cals = initialCals) )
}
allMigrations = NULL
migrations = NULL
counter = 1
while (counter < (365*24)){
migrations = NULL
for (mysis in mysids){
mysis = nextTime(mysis, Temp_Response(counter))
migrations = c(migrations, mysis@migrating)
print(mysis)
}
allMigrations = cbind(allMigrations, migrations)
counter = counter + 1
}
View(allMigrations)
View(allMigrations)
log(10)
exp(2.3)
lightDepth = function(surfaceLight){
#First we will set the assumed constants. These will most likely be toggled.
k   = 0.15  #extinction coefficient
I_x = 0.001 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return distance
}
lightDepth = function(surfaceLight){
#First we will set the assumed constants. These will most likely be toggled.
k   = 0.15  #extinction coefficient
I_x = 0.001 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return(distance)
}
lightDepth(40)
lightDepth(1000)
lightDepth = function(surfaceLight){
#First we will set the assumed constants. These will most likely be toggled.
k   = 0.15  #extinction coefficient
I_x = 0.0001 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return(distance)
}
lightDepth(1000)
log(10)
log(.10)
lightDepth = function(surfaceLight){
#First we will set the assumed constants. These will most likely be toggled.
k   = 0.15  #extinction coefficient
I_x = 0.01 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return(distance)
}
lightDepth(1000)
lightDepth(10000)
lightDepth(30000)
0:10
1:10
days = 1:30
lightLevel = []
days = 1:30
lightLevel = c()
for (day in days){
lightLevel = c(lightLevel, 0.5 * cos((1/30)* 2*pi * day ) + .5)
}
lightLevel
plot(days, lightLevel)
isocline = NULL
for (day in lightLevel){
isocline = c(isocline, lightDepth(day))
}
isocline
lightLevel
isocline = NULL
for (day in lightLevel){
if (day == 0){
isocline = c(isocline, 0) #logs dont play nice with 0s
} else {
isocline = c(isocline, lightDepth(day))
}
}
isocline
plot(days, isocline)
plot(days, isocline, "-")
plot(days, isocline, "--")
plot(days, isocline, "b-")
plot(days, isocline, "b-", xlabel = "isocline depth")
plot(days, isocline, "b-", xlab = "isocline depth")
plot(days, isocline, "b-", ylab = "isocline depth")
plot(days, isocline, ylab = "isocline depth")
plot(days, isocline, ylab = "isocline depth", title = "Mysis light threshold")
plot(days, isocline, ylab = "isocline depth", main = "Mysis light threshold")
warnings()
plot(days, isocline, ylab = "isocline depth", main = "Mysis light threshold")
depthData
12%4
12%%4
12%%3
12%%6
12%%7
seq(1,100, 13)
seq(1,24*30, 24))
seq(1,24*30, 24)
seq(1,24*30, 24).length
seq(1,24*30, 24).lenth()
len(seq(1,24*30, 24)))
length(seq(1,24*30, 24)))
length(seq(1,24*30, 24))
smallDepthData = NULL
for (i in seq(1,24*30, 24)){
smallDepthData = c(smallDepthData, depthData[i])
}
smallDepthData
plot(days, smallDepthData)
plot(days, isocline, ylab = "isocline depth", main = "Mysis light threshold")
plot(days, isocline, ylab = "isocline depth", main = "Mysis light threshold")
par(new = T)
plot(days, smallDepthData)
par(new=F)
#plot it!
plot(days, isocline, ylab = "isocline depth", main = "Mysis light threshold")
lines(days, smallDepthData)
plot(days, isocline, type = "-", ylab = "isocline depth", main = "Mysis light threshold")
plot(days, isocline, type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, smallDepthData)
setwd("/Users/Nick/mysisModeling")
# Thus begins the mysis model.
# Functions that drive the model are written in the form Foo_Foo
# Variables that go into the model are writtenin camelCase. E.g. fooFoo.
#Let's bring in the thermocline depth data
#---------------------------------------------------------------------------------------------
#Bringing in outside data:
#---------------------------------------------------------------------------------------------
depthData = read.csv("thermoclineDepths.csv")$dist
#---------------------------------------------------------------------------------------------
#Depth of light threshold function:
#---------------------------------------------------------------------------------------------
lightDepth = function(surfaceLight){
#First we will set constants. These will most likely be toggled.
k   = 0.15  #extinction coefficient
I_x = 0.01 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return(distance)
}
#30 day cycle
days = 1:30
#Nightime light level in lux
lightLevel = NULL
for (day in days){
lightLevel = c(lightLevel, 0.5 * cos((1/30)* 2*pi * day ) + .5)
}
#Check to see if this is functional
#plot(days, lightLevel)
#Now we will run our light depth function over this:
isocline = NULL
for (day in lightLevel){
if (day == 0){
isocline = c(isocline, 0) #logs dont play nice with 0s
} else {
isocline = c(isocline, lightDepth(day))
}
}
#Now let's grab some of our depth data real quick:
smallDepthData = NULL
for (i in seq(1,24*30, 24)){
smallDepthData = c(smallDepthData, depthData[i])
}
#plot it!
plot(days, isocline, type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, smallDepthData)
setwd("/Users/Nick/mysisModeling")
# Thus begins the mysis model.
# Functions that drive the model are written in the form Foo_Foo
# Variables that go into the model are writtenin camelCase. E.g. fooFoo.
#Let's bring in the thermocline depth data
#---------------------------------------------------------------------------------------------
#Bringing in outside data:
#---------------------------------------------------------------------------------------------
depthData = read.csv("thermoclineDepths.csv")$dist
#---------------------------------------------------------------------------------------------
#Depth of light threshold function:
#---------------------------------------------------------------------------------------------
lightDepth = function(surfaceLight){
#First we will set constants. These will most likely be toggled.
k   = 0.15  #extinction coefficient
I_x = 0.01 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return(distance)
}
#30 day cycle
days = 1:30
#Nightime light level in lux
lightLevel = NULL
for (day in days){
lightLevel = c(lightLevel, 0.5 * cos((1/30)* 2*pi * day ) + .5)
}
#Check to see if this is functional
#plot(days, lightLevel)
#Now we will run our light depth function over this:
isocline = NULL
for (day in lightLevel){
if (day == 0){
isocline = c(isocline, 0) #logs dont play nice with 0s
} else {
isocline = c(isocline, lightDepth(day))
}
}
#Now let's grab some of our depth data real quick:
smallDepthData = NULL
for (i in seq(1,24*30, 24)){
smallDepthData = c(smallDepthData, depthData[i])
}
#plot it!
plot(days, isocline, type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, smallDepthData)
setwd("/Users/Nick/mysisModeling")
# Thus begins the mysis model.
# Functions that drive the model are written in the form Foo_Foo
# Variables that go into the model are writtenin camelCase. E.g. fooFoo.
#Let's bring in the thermocline depth data
#---------------------------------------------------------------------------------------------
#Bringing in outside data:
#---------------------------------------------------------------------------------------------
depthData = read.csv("thermoclineDepths.csv")$dist
#---------------------------------------------------------------------------------------------
#Depth of light threshold function:
#---------------------------------------------------------------------------------------------
lightDepth = function(surfaceLight){
#First we will set constants. These will most likely be toggled.
k   = 0.15  #extinction coefficient
I_x = 0.01 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return(distance)
}
#30 day cycle
days = 1:30
#Nightime light level in lux
lightLevel = NULL
for (day in days){
lightLevel = c(lightLevel, 0.5 * cos((1/30)* 2*pi * day ) + .5)
}
#Check to see if this is functional
#plot(days, lightLevel)
#Now we will run our light depth function over this:
isocline = NULL
for (day in lightLevel){
if (day == 0){
isocline = c(isocline, 0) #logs dont play nice with 0s
} else {
isocline = c(isocline, lightDepth(day))
}
}
#Now let's grab some of our depth data real quick:
smallDepthData = NULL
for (i in seq(1,24*30, 24)){
smallDepthData = c(smallDepthData, depthData[i])
}
#plot it!
plot(days, isocline, type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, smallDepthData)
280 %% 30
days = 1:365
#Nightime light level in lux
lightLevel = NULL
for (day in days){
cyclePoint = day %% 30
lightLevel = c(lightLevel, 0.5 * cos((1/30)* 2*pi * cyclePoint ) + .5)
}
lightLevel
plot(days, lightLevel)
plot(days, lightLevel, type = "l")
#Now we will run our light depth function over this:
isocline = NULL
for (day in lightLevel){
if (day == 0){
isocline = c(isocline, 0) #logs dont play nice with 0s
} else {
isocline = c(isocline, lightDepth(day))
}
}
plot(days, isocline, type = "l")
smallDepthData = NULL
for (i in seq(1,24*365, 24)){
smallDepthData = c(smallDepthData, depthData[i])
}
plot(days, isocline, type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, smallDepthData)
plot(days, smallDepthData , type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, isocline)
plot(days, smallDepthData , col = "r", type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, isocline, col = "b")
#plot it!
plot(days, smallDepthData , type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, isocline)
lightDepth = function(surfaceLight){
#First we will set constants. These will most likely be toggled.
k   = 0.3  #extinction coefficient
I_x = 0.01 #Mysis light threshold (paper quotes between 10^-2 and 10^-4)
distance = (1/k) * (log(surfaceLight) - log(I_x))
return(distance)
}
days = 1:365
lightLevel = NULL
for (day in days){
cyclePoint = day %% 30
lightLevel = c(lightLevel, 0.5 * cos((1/30)* 2*pi * cyclePoint ) + .5)
}
#Check to see if this is functional
plot(days, lightLevel, type = "l")
f
isocline = NULL
for (day in lightLevel){
if (day == 0){
isocline = c(isocline, 0) #logs dont play nice with 0s
} else {
isocline = c(isocline, lightDepth(day))
}
}
#Check to see if this is functional
plot(days, isocline, type = "l")
lightDepth(40000)
smallDepthData = NULL
for (i in seq(1,24*365, 24)){
smallDepthData = c(smallDepthData, depthData[i])
}
#plot it!
plot(days, smallDepthData , type = "l", ylab = "isocline depth", main = "Mysis light threshold")
lines(days, isocline)
setwd("/Users/Nick/mysisModeling")
solarRaw = read.csv("data/726170_1991_solar.csv")
View(solarRaw)
View(solarRaw)
24*365
head(solarRaw, 1)
solarRaw[4,:]
solarRaw[4:,]
solarRaw[4]
solarRaw[,4]
head(solarRaw, 1)
head(solarRaw, 1)[20]
solarRaw[20]
plot(solarRaw[20])
summmary(solarRaw[20])
hist(solarRaw[20])
head(solarRaw,1)[20]
head(solarRaw$METSTAT.Dif..Wh.m.2.)
plot(solarRaw$METSTAT.Dif..Wh.m.2.)
hist(solarRaw$METSTAT.Dif..Wh.m.2.)
summary(solarRaw$METSTAT.Dif..Wh.m.2.)
hist(solarRaw$METSTAT.Dif..Wh.m.2.)
plot(solarRaw$METSTAT.Dif..Wh.m.2.)
plot(solarRaw$METSTAT.Dif..Wh.m.2., type = "l")
